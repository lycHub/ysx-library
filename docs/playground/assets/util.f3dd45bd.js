var v=`import cryptoRandomString from 'crypto-random-string';\r
export function genItems(length: number) {\r
  return Array.from({ length }).map((_, index) => {\r
    const id = cryptoRandomString({ length: 8 });\r
    return \`\${id}-\${index + 1}\`;\r
  });\r
}`;const p=[..."abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~"],h=[..."0123456789"],m=[..."CDEHKMPRTUWXY012458"],w=[..."!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"],x=[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"],g=(n,r)=>n[r]+(n[r+1]<<8),b=(n,r,t)=>{const e=r.length,i=Math.floor(65536/e)*e-1,o=2*Math.ceil(1.1*n);let s="",a=0;for(;a<n;){const l=t(o);let c=0;for(;c<o&&a<n;){const u=g(l,c);c+=2,!(u>i)&&(s+=r[u%e],a++)}}return s},E=new Set([void 0,"hex","base64","url-safe","numeric","distinguishable","ascii-printable","alphanumeric"]),S=(n,r,t)=>({length:e,type:i,characters:o})=>{if(!(e>=0&&Number.isFinite(e)))throw new TypeError("Expected a `length` to be a non-negative finite number");if(i!==void 0&&o!==void 0)throw new TypeError("Expected either `type` or `characters`");if(o!==void 0&&typeof o!="string")throw new TypeError("Expected `characters` to be string");if(!E.has(i))throw new TypeError(`Unknown type: ${i}`);if(i===void 0&&o===void 0&&(i="hex"),i==="hex"||i===void 0&&o===void 0)return r(Math.ceil(e*.5),"hex",e);if(i==="base64")return r(Math.ceil(e*.75),"base64",e);if(i==="url-safe")return n(e,p,t);if(i==="numeric")return n(e,h,t);if(i==="distinguishable")return n(e,m,t);if(i==="ascii-printable")return n(e,w,t);if(i==="alphanumeric")return n(e,x,t);if(o.length===0)throw new TypeError("Expected `characters` string length to be greater than or equal to 1");if(o.length>65536)throw new TypeError("Expected `characters` string length to be less or equal to 65536");return n(e,o,t)};function T(n,r){return S(b,n,r)}const y=n=>[...n].map(r=>r.toString(16).padStart(2,"0")).join(""),M=n=>btoa(String.fromCodePoint(...n)),d=65536;function f(n){const r=new Uint8Array(n);for(let t=0;t<n;t+=d)r.set(crypto.getRandomValues(new Uint8Array(Math.min(d,n-t))),t);return r}function R(n,r,t){const e=f(n);return(r==="hex"?y:M)(e).slice(0,t)}var _=T(R,f);function U(n){return Array.from({length:n}).map((r,t)=>`${_({length:8})}-${t+1}`)}export{U as g,v as u};
